-- ==============================================================
-- RTL generated by AutoESL - High-Level Synthesis System (C, C++, SystemC)
-- Version: 2012.1
-- Copyright (C) 2012 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

library work;
use work.AESL_components.all;

entity distance_squared is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    vector1_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    vector1_data_V_empty_n : IN STD_LOGIC;
    vector1_data_V_read : OUT STD_LOGIC;
    vector1_keep_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    vector1_keep_V_empty_n : IN STD_LOGIC;
    vector1_keep_V_read : OUT STD_LOGIC;
    vector1_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    vector1_last_V_empty_n : IN STD_LOGIC;
    vector1_last_V_read : OUT STD_LOGIC;
    vector2_data_V_dout : IN STD_LOGIC_VECTOR (63 downto 0);
    vector2_data_V_empty_n : IN STD_LOGIC;
    vector2_data_V_read : OUT STD_LOGIC;
    vector2_keep_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    vector2_keep_V_empty_n : IN STD_LOGIC;
    vector2_keep_V_read : OUT STD_LOGIC;
    vector2_last_V_dout : IN STD_LOGIC_VECTOR (0 downto 0);
    vector2_last_V_empty_n : IN STD_LOGIC;
    vector2_last_V_read : OUT STD_LOGIC;
    sum : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of distance_squared is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st0_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st1_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st2_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st3_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st4_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_pp0_stg0_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st28_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st29_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st30_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st31_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st32_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st33_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st34_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st35_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st36_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st37_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st38_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st39_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st40_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st41_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st42_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st43_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st44_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st45_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st46_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st47_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st48_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st49_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st50_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st51_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st52_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st53_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st54_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st55_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st56_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st57_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st58_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st59_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st60_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st61_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st62_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st63_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st64_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st65_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st66_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_C8 : STD_LOGIC_VECTOR (7 downto 0) := "11001000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal dim_reg_203 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_215_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_240 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal exitcond1_reg_322 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_100 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it15 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it16 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it17 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it18 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it19 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it20 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it21 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it22 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it10 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_of_squares_split_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_247 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it15 : STD_LOGIC_VECTOR (0 downto 0);
    signal sum_of_squares_split_addr_gep_fu_121_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_reg_282 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_1_gep_fu_135_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_1_reg_287 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_2_gep_fu_148_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_2_reg_292 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_3_gep_fu_156_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_3_reg_297 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_4_gep_fu_164_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_4_reg_302 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_5_gep_fu_172_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_5_reg_307 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_6_gep_fu_180_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_6_reg_312 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_7_gep_fu_188_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_addr_7_reg_317 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it5 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it7 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it8 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it9 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it11 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it12 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it13 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it14 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it16 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it17 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it18 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it19 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it20 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond1_reg_322_pp0_it21 : STD_LOGIC_VECTOR (0 downto 0);
    signal dim_cast2_reg_331 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it1 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it5 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it6 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it7 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it8 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it9 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it10 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it11 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it12 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it13 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_dim_cast2_reg_331_pp0_it14 : STD_LOGIC_VECTOR (2 downto 0);
    signal vector1_data_V_read_reg_336 : STD_LOGIC_VECTOR (63 downto 0);
    signal vector2_data_V_read_reg_341 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vector1_data_reg_346 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_237_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal vector2_data_reg_351 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_of_squares_split_addr_8_reg_356 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it16 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it17 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it18 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it19 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it20 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it21 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal diff_squared_reg_362 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_367 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_of_squares_reg_372 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_of_squares_split_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_ce0 : STD_LOGIC;
    signal sum_of_squares_split_we0 : STD_LOGIC;
    signal sum_of_squares_split_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_of_squares_split_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_of_squares_split_ce1 : STD_LOGIC;
    signal sum_of_squares_split_we1 : STD_LOGIC;
    signal sum_of_squares_split_d1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_cast_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_215_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_224_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_234_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_237_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_228_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_215_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_215_ce : STD_LOGIC;
    signal grp_fu_219_ce : STD_LOGIC;
    signal grp_fu_224_ce : STD_LOGIC;
    signal grp_fu_228_ce : STD_LOGIC;
    signal grp_fu_228_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_234_ce : STD_LOGIC;
    signal grp_fu_237_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal sum_of_squares_split_addr_8_reg_3560 : STD_LOGIC_VECTOR (31 downto 0);

    component distance_squared_grp_fu_215_ACMP_dadddsub_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component distance_squared_grp_fu_219_ACMP_dadd_2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component distance_squared_grp_fu_224_ACMP_dmul_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component distance_squared_grp_fu_228_ACMP_dcmp_4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component distance_squared_grp_fu_234_ACMP_sitodp_5 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component distance_squared_grp_fu_237_ACMP_sitodp_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component distance_squared_sum_of_squares_split IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    sum_of_squares_split_U : component distance_squared_sum_of_squares_split
    generic map (
        DataWidth => 64,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum_of_squares_split_address0,
        ce0 => sum_of_squares_split_ce0,
        we0 => sum_of_squares_split_we0,
        d0 => sum_of_squares_split_d0,
        q0 => sum_of_squares_split_q0,
        address1 => sum_of_squares_split_address1,
        ce1 => sum_of_squares_split_ce1,
        we1 => sum_of_squares_split_we1,
        d1 => sum_of_squares_split_d1);

    distance_squared_grp_fu_215_ACMP_dadddsub_1_U : component distance_squared_grp_fu_215_ACMP_dadddsub_1
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_215_p0,
        din1 => grp_fu_215_p1,
        opcode => grp_fu_215_opcode,
        ce => grp_fu_215_ce,
        dout => grp_fu_215_p2);

    distance_squared_grp_fu_219_ACMP_dadd_2_U : component distance_squared_grp_fu_219_ACMP_dadd_2
    generic map (
        ID => 2,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_219_p0,
        din1 => grp_fu_219_p1,
        ce => grp_fu_219_ce,
        dout => grp_fu_219_p2);

    distance_squared_grp_fu_224_ACMP_dmul_3_U : component distance_squared_grp_fu_224_ACMP_dmul_3
    generic map (
        ID => 3,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_224_p0,
        din1 => grp_fu_224_p1,
        ce => grp_fu_224_ce,
        dout => grp_fu_224_p2);

    distance_squared_grp_fu_228_ACMP_dcmp_4_U : component distance_squared_grp_fu_228_ACMP_dcmp_4
    generic map (
        ID => 4,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_228_p0,
        din1 => grp_fu_228_p1,
        ce => grp_fu_228_ce,
        opcode => grp_fu_228_opcode,
        dout => grp_fu_228_p2);

    distance_squared_grp_fu_234_ACMP_sitodp_5_U : component distance_squared_grp_fu_234_ACMP_sitodp_5
    generic map (
        ID => 5,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_234_p0,
        ce => grp_fu_234_ce,
        dout => grp_fu_234_p1);

    distance_squared_grp_fu_237_ACMP_sitodp_6_U : component distance_squared_grp_fu_237_ACMP_sitodp_6
    generic map (
        ID => 6,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_237_p0,
        ce => grp_fu_237_ce,
        dout => grp_fu_237_p1);




    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st0_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and esl_not((ap_const_lv1_0 = exitcond1_fu_254_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_254_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif (((ap_ST_st4_fsm_4 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and esl_not((ap_const_lv1_0 = exitcond1_fu_254_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it10 assign process. --
    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it11 assign process. --
    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it12 assign process. --
    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it13 assign process. --
    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it14 assign process. --
    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it15 assign process. --
    ap_reg_ppiten_pp0_it15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it15 <= ap_reg_ppiten_pp0_it14;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it15 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it16 assign process. --
    ap_reg_ppiten_pp0_it16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it16 <= ap_reg_ppiten_pp0_it15;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it16 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it17 assign process. --
    ap_reg_ppiten_pp0_it17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it17 <= ap_reg_ppiten_pp0_it16;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it17 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it18 assign process. --
    ap_reg_ppiten_pp0_it18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it18 <= ap_reg_ppiten_pp0_it17;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it18 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it19 assign process. --
    ap_reg_ppiten_pp0_it19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it19 <= ap_reg_ppiten_pp0_it18;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it20 assign process. --
    ap_reg_ppiten_pp0_it20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it20 <= ap_reg_ppiten_pp0_it19;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it20 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it21 assign process. --
    ap_reg_ppiten_pp0_it21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it21 <= ap_reg_ppiten_pp0_it20;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it21 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it22 assign process. --
    ap_reg_ppiten_pp0_it22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it22 <= ap_reg_ppiten_pp0_it21;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it22 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it4 assign process. --
    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it5 assign process. --
    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it6 assign process. --
    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it7 assign process. --
    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it8 assign process. --
    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it9 assign process. --
    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                    ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
                elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg assign process. --
    ap_reg_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it1 <= dim_cast2_reg_331;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it10 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it9;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it11 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it10;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it12 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it11;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it13 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it12;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it14 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it13;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it2 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it1;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it3 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it2;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it4 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it3;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it5 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it4;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it6 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it5;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it7 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it6;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it8 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it7;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_dim_cast2_reg_331_pp0_it9 <= ap_reg_ppstg_dim_cast2_reg_331_pp0_it8;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it1 <= exitcond1_reg_322;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it10 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it9;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it11 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it10;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it12 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it11;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it13 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it12;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it14 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it13;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it15 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it14;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it16 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it15;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it17 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it16;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it18 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it17;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it19 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it18;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it2 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it1;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it20 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it19;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it21 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it20;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it3 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it2;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it4 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it3;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it5 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it4;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it6 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it5;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it7 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it6;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it8 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it7;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_exitcond1_reg_322_pp0_it9 <= ap_reg_ppstg_exitcond1_reg_322_pp0_it8;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it16 <= sum_of_squares_split_addr_8_reg_356;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it17 <= ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it16;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it18 <= ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it17;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it19 <= ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it18;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it20 <= ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it19;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it21 <= ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it20;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it16) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it15))) then 
                diff_squared_reg_362 <= grp_fu_224_p2;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_254_p2))) then 
                dim_cast2_reg_331 <= esl_trunc(dim_reg_203, 3);
            end if; 
            if ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
                dim_reg_203 <= ap_const_lv8_0;
            elsif (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = exitcond1_fu_254_p2))) then 
                dim_reg_203 <= esl_add(dim_reg_203, ap_const_lv8_1);
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                exitcond1_reg_322 <= esl_icmp_eq(dim_reg_203, ap_const_lv8_C8);
            end if; 
            if ((((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it11) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it10)) or (ap_ST_st36_fsm_14 = ap_CS_fsm) or (ap_ST_st41_fsm_19 = ap_CS_fsm) or (ap_ST_st46_fsm_24 = ap_CS_fsm) or (ap_ST_st51_fsm_29 = ap_CS_fsm) or (ap_ST_st56_fsm_34 = ap_CS_fsm) or (ap_ST_st61_fsm_39 = ap_CS_fsm))) then 
                reg_240 <= grp_fu_215_p2;
            end if; 
            if (((ap_ST_st36_fsm_14 = ap_CS_fsm) or (ap_ST_st41_fsm_19 = ap_CS_fsm) or (ap_ST_st46_fsm_24 = ap_CS_fsm) or (ap_ST_st51_fsm_29 = ap_CS_fsm) or (ap_ST_st56_fsm_34 = ap_CS_fsm) or (ap_ST_st61_fsm_39 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it16) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it15)) or (ap_ST_st29_fsm_7 = ap_CS_fsm) or (ap_ST_st31_fsm_9 = ap_CS_fsm))) then 
                reg_247 <= sum_of_squares_split_q0;
            end if; 
            if ((ap_ST_st31_fsm_9 = ap_CS_fsm)) then 
                if grp_fu_228_p2(0) = '1' then 
                    sum_of_squares_reg_372 <= ap_const_lv64_0;
                else 
                    sum_of_squares_reg_372 <= reg_247;
                end if;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it15) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it14))) then 
                sum_of_squares_split_addr_8_reg_356 <= esl_trunc(sum_of_squares_split_addr_8_reg_3560, 3);
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it21) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it20))) then 
                tmp_1_reg_367 <= grp_fu_219_p2;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (exitcond1_reg_322 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                vector1_data_V_read_reg_336 <= vector1_data_V_dout;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it5))) then 
                vector1_data_reg_346 <= grp_fu_234_p1;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (exitcond1_reg_322 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
                vector2_data_V_read_reg_341 <= vector2_data_V_dout;
            end if; 
            if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it6) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it5))) then 
                vector2_data_reg_351 <= grp_fu_237_p1;
            end if; 
        end if;
    end process;
    sum_of_squares_split_addr_reg_282(2 downto 0) <= "000";
    sum_of_squares_split_addr_1_reg_287(2 downto 0) <= "001";
    sum_of_squares_split_addr_2_reg_292(2 downto 0) <= "010";
    sum_of_squares_split_addr_3_reg_297(2 downto 0) <= "011";
    sum_of_squares_split_addr_4_reg_302(2 downto 0) <= "100";
    sum_of_squares_split_addr_5_reg_307(2 downto 0) <= "101";
    sum_of_squares_split_addr_6_reg_312(2 downto 0) <= "110";
    sum_of_squares_split_addr_7_reg_317(2 downto 0) <= "111";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process(ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it21, ap_reg_ppiten_pp0_it22, exitcond1_fu_254_p2)
    begin
        if ((((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and esl_not((ap_const_logic_1 = ap_reg_ppiten_pp0_it21))) or ((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and esl_not((ap_const_lv1_0 = exitcond1_fu_254_p2)) and esl_not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            ap_NS_fsm <= ap_ST_st28_fsm_6;
        elsif (((ap_ST_st66_fsm_44 = ap_CS_fsm) and esl_not((ap_const_logic_1 = ap_start)))) then 
            ap_NS_fsm <= ap_ST_st0_fsm_0;
        elsif ((ap_ST_st65_fsm_43 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st66_fsm_44;
        elsif ((ap_ST_st64_fsm_42 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st65_fsm_43;
        elsif ((ap_ST_st63_fsm_41 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st64_fsm_42;
        elsif ((ap_ST_st62_fsm_40 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st63_fsm_41;
        elsif ((ap_ST_st61_fsm_39 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st62_fsm_40;
        elsif ((ap_ST_st60_fsm_38 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st61_fsm_39;
        elsif ((ap_ST_st59_fsm_37 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st60_fsm_38;
        elsif ((ap_ST_st58_fsm_36 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st59_fsm_37;
        elsif ((ap_ST_st57_fsm_35 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st58_fsm_36;
        elsif ((ap_ST_st56_fsm_34 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st57_fsm_35;
        elsif ((ap_ST_st55_fsm_33 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st56_fsm_34;
        elsif ((ap_ST_st54_fsm_32 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st55_fsm_33;
        elsif ((ap_ST_st53_fsm_31 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st54_fsm_32;
        elsif ((ap_ST_st52_fsm_30 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st53_fsm_31;
        elsif ((ap_ST_st51_fsm_29 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st52_fsm_30;
        elsif ((ap_ST_st50_fsm_28 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st51_fsm_29;
        elsif ((ap_ST_st49_fsm_27 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st50_fsm_28;
        elsif ((ap_ST_st48_fsm_26 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st49_fsm_27;
        elsif ((ap_ST_st47_fsm_25 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st48_fsm_26;
        elsif ((ap_ST_st46_fsm_24 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st47_fsm_25;
        elsif ((ap_ST_st45_fsm_23 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st46_fsm_24;
        elsif ((ap_ST_st44_fsm_22 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st45_fsm_23;
        elsif ((ap_ST_st43_fsm_21 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st44_fsm_22;
        elsif ((ap_ST_st42_fsm_20 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st43_fsm_21;
        elsif ((ap_ST_st41_fsm_19 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st42_fsm_20;
        elsif ((ap_ST_st40_fsm_18 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st41_fsm_19;
        elsif ((ap_ST_st39_fsm_17 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st40_fsm_18;
        elsif ((ap_ST_st38_fsm_16 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st39_fsm_17;
        elsif ((ap_ST_st37_fsm_15 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st38_fsm_16;
        elsif ((ap_ST_st36_fsm_14 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st37_fsm_15;
        elsif ((ap_ST_st35_fsm_13 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st36_fsm_14;
        elsif ((ap_ST_st34_fsm_12 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st35_fsm_13;
        elsif ((ap_ST_st33_fsm_11 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st34_fsm_12;
        elsif ((ap_ST_st32_fsm_10 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st33_fsm_11;
        elsif ((ap_ST_st31_fsm_9 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st32_fsm_10;
        elsif ((ap_ST_st30_fsm_8 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st31_fsm_9;
        elsif ((ap_ST_st29_fsm_7 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st30_fsm_8;
        elsif ((ap_ST_st28_fsm_6 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st29_fsm_7;
        elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_pp0_stg0_fsm_5;
        elsif ((ap_ST_st3_fsm_3 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st4_fsm_4;
        elsif ((ap_ST_st2_fsm_2 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st3_fsm_3;
        elsif ((ap_ST_st1_fsm_1 = ap_CS_fsm)) then 
            ap_NS_fsm <= ap_ST_st2_fsm_2;
        elsif ((((ap_ST_st0_fsm_0 = ap_CS_fsm) and (ap_const_logic_1 = ap_start)) or ((ap_ST_st66_fsm_44 = ap_CS_fsm) and (ap_const_logic_1 = ap_start)))) then 
            ap_NS_fsm <= ap_ST_st1_fsm_1;
        else 
            ap_NS_fsm <= ap_CS_fsm;
        end if; 
    end process;


    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st66_fsm_44 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st0_fsm_0 = ap_CS_fsm)) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_100 assign process. --
    ap_sig_bdd_100_assign_proc : process(vector1_data_V_empty_n, vector2_data_V_empty_n, exitcond1_reg_322)
    begin
                ap_sig_bdd_100 <= (((vector1_data_V_empty_n = ap_const_logic_0) and (exitcond1_reg_322 = ap_const_lv1_0)) or ((exitcond1_reg_322 = ap_const_lv1_0) and (vector2_data_V_empty_n = ap_const_logic_0)));
    end process;

    exitcond1_fu_254_p2 <= esl_icmp_eq(dim_reg_203, ap_const_lv8_C8);

    -- grp_fu_215_ce assign process. --
    grp_fu_215_ce_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_322_pp0_it10, ap_reg_ppstg_exitcond1_reg_322_pp0_it6, ap_reg_ppstg_exitcond1_reg_322_pp0_it7, ap_reg_ppstg_exitcond1_reg_322_pp0_it8, ap_reg_ppstg_exitcond1_reg_322_pp0_it9)
    begin
        if (((ap_ST_st0_fsm_0 = ap_CS_fsm) or (ap_ST_st29_fsm_7 = ap_CS_fsm) or (ap_ST_st31_fsm_9 = ap_CS_fsm) or (ap_ST_st1_fsm_1 = ap_CS_fsm) or (ap_ST_st2_fsm_2 = ap_CS_fsm) or (ap_ST_st3_fsm_3 = ap_CS_fsm) or (ap_ST_st4_fsm_4 = ap_CS_fsm) or (ap_ST_st28_fsm_6 = ap_CS_fsm) or (ap_ST_st30_fsm_8 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and ((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or (esl_not((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it6)) and esl_not((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it7)) and esl_not((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it8)) and esl_not((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it9)) and esl_not((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it10))))))) then 
            grp_fu_215_ce <= ap_const_logic_0;
        else 
            grp_fu_215_ce <= ap_const_logic_1;
        end if; 
    end process;


    -- grp_fu_215_opcode assign process. --
    grp_fu_215_opcode_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond1_reg_322_pp0_it6)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it6))) then 
            grp_fu_215_opcode <= ap_const_lv2_1;
        elsif (((ap_ST_st32_fsm_10 = ap_CS_fsm) or (ap_ST_st37_fsm_15 = ap_CS_fsm) or (ap_ST_st42_fsm_20 = ap_CS_fsm) or (ap_ST_st47_fsm_25 = ap_CS_fsm) or (ap_ST_st52_fsm_30 = ap_CS_fsm) or (ap_ST_st57_fsm_35 = ap_CS_fsm) or (ap_ST_st62_fsm_40 = ap_CS_fsm))) then 
            grp_fu_215_opcode <= ap_const_lv2_0;
        else 
            grp_fu_215_opcode <= ap_const_lv2_1;
        end if; 
    end process;


    -- grp_fu_215_p0 assign process. --
    grp_fu_215_p0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it7, reg_247, ap_reg_ppstg_exitcond1_reg_322_pp0_it6, vector1_data_reg_346)
    begin
        if (((ap_ST_st32_fsm_10 = ap_CS_fsm) or (ap_ST_st37_fsm_15 = ap_CS_fsm) or (ap_ST_st42_fsm_20 = ap_CS_fsm) or (ap_ST_st47_fsm_25 = ap_CS_fsm) or (ap_ST_st52_fsm_30 = ap_CS_fsm) or (ap_ST_st57_fsm_35 = ap_CS_fsm) or (ap_ST_st62_fsm_40 = ap_CS_fsm))) then 
            grp_fu_215_p0 <= reg_247;
        elsif (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it6))) then 
            grp_fu_215_p0 <= vector1_data_reg_346;
        else 
            grp_fu_215_p0 <= vector1_data_reg_346;
        end if; 
    end process;


    -- grp_fu_215_p1 assign process. --
    grp_fu_215_p1_assign_proc : process(ap_CS_fsm, reg_240, ap_reg_ppiten_pp0_it7, ap_reg_ppstg_exitcond1_reg_322_pp0_it6, vector2_data_reg_351, sum_of_squares_reg_372)
    begin
        if (((ap_ST_st37_fsm_15 = ap_CS_fsm) or (ap_ST_st42_fsm_20 = ap_CS_fsm) or (ap_ST_st47_fsm_25 = ap_CS_fsm) or (ap_ST_st52_fsm_30 = ap_CS_fsm) or (ap_ST_st57_fsm_35 = ap_CS_fsm) or (ap_ST_st62_fsm_40 = ap_CS_fsm))) then 
            grp_fu_215_p1 <= reg_240;
        elsif ((ap_ST_st32_fsm_10 = ap_CS_fsm)) then 
            grp_fu_215_p1 <= sum_of_squares_reg_372;
        elsif (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it7) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it6))) then 
            grp_fu_215_p1 <= vector2_data_reg_351;
        else 
            grp_fu_215_p1 <= sum_of_squares_reg_372;
        end if; 
    end process;


    -- grp_fu_219_ce assign process. --
    grp_fu_219_ce_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_322_pp0_it16, ap_reg_ppstg_exitcond1_reg_322_pp0_it17, ap_reg_ppstg_exitcond1_reg_322_pp0_it18, ap_reg_ppstg_exitcond1_reg_322_pp0_it19, ap_reg_ppstg_exitcond1_reg_322_pp0_it20)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it20) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it16) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it17) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it18) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it19)))) then 
            grp_fu_219_ce <= ap_const_logic_1;
        else 
            grp_fu_219_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_219_p0 <= reg_247;
    grp_fu_219_p1 <= diff_squared_reg_362;

    -- grp_fu_224_ce assign process. --
    grp_fu_224_ce_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_322_pp0_it15, ap_reg_ppstg_exitcond1_reg_322_pp0_it11, ap_reg_ppstg_exitcond1_reg_322_pp0_it12, ap_reg_ppstg_exitcond1_reg_322_pp0_it13, ap_reg_ppstg_exitcond1_reg_322_pp0_it14)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it15) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it14) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it11) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it12) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it13)))) then 
            grp_fu_224_ce <= ap_const_logic_1;
        else 
            grp_fu_224_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_224_p0 <= reg_240;
    grp_fu_224_p1 <= reg_240;
    grp_fu_228_ce <= ap_const_logic_1;
    grp_fu_228_opcode <= ap_const_lv5_1;
    grp_fu_228_p0 <= sum_of_squares_split_q0;
    grp_fu_228_p1 <= ap_const_lv64_8000000000000000;

    -- grp_fu_234_ce assign process. --
    grp_fu_234_ce_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_322_pp0_it1, ap_reg_ppstg_exitcond1_reg_322_pp0_it2, ap_reg_ppstg_exitcond1_reg_322_pp0_it3, ap_reg_ppstg_exitcond1_reg_322_pp0_it4, ap_reg_ppstg_exitcond1_reg_322_pp0_it5)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it4)))) then 
            grp_fu_234_ce <= ap_const_logic_1;
        else 
            grp_fu_234_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_234_p0 <= vector1_data_V_read_reg_336;

    -- grp_fu_237_ce assign process. --
    grp_fu_237_ce_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppstg_exitcond1_reg_322_pp0_it1, ap_reg_ppstg_exitcond1_reg_322_pp0_it2, ap_reg_ppstg_exitcond1_reg_322_pp0_it3, ap_reg_ppstg_exitcond1_reg_322_pp0_it4, ap_reg_ppstg_exitcond1_reg_322_pp0_it5)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and ((ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it5) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it1) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it2) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it3) or (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it4)))) then 
            grp_fu_237_ce <= ap_const_logic_1;
        else 
            grp_fu_237_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_237_p0 <= vector2_data_V_read_reg_341;
    sum <= grp_fu_215_p2;
    sum_of_squares_split_addr_1_gep_fu_135_p3 <= esl_trunc(ap_const_lv32_1, 3);
    sum_of_squares_split_addr_2_gep_fu_148_p3 <= esl_trunc(ap_const_lv32_2, 3);
    sum_of_squares_split_addr_3_gep_fu_156_p3 <= esl_trunc(ap_const_lv32_3, 3);
    sum_of_squares_split_addr_4_gep_fu_164_p3 <= esl_trunc(ap_const_lv32_4, 3);
    sum_of_squares_split_addr_5_gep_fu_172_p3 <= esl_trunc(ap_const_lv32_5, 3);
    sum_of_squares_split_addr_6_gep_fu_180_p3 <= esl_trunc(ap_const_lv32_6, 3);
    sum_of_squares_split_addr_7_gep_fu_188_p3 <= esl_trunc(ap_const_lv32_7, 3);
    sum_of_squares_split_addr_8_reg_3560 <= esl_zext(ap_reg_ppstg_dim_cast2_reg_331_pp0_it14, 32);
    sum_of_squares_split_addr_gep_fu_121_p3 <= esl_trunc(ap_const_lv32_0, 3);

    -- sum_of_squares_split_address0 assign process. --
    sum_of_squares_split_address0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it15, sum_of_squares_split_addr_reg_282, sum_of_squares_split_addr_1_reg_287, sum_of_squares_split_addr_2_reg_292, sum_of_squares_split_addr_3_reg_297, sum_of_squares_split_addr_4_reg_302, sum_of_squares_split_addr_5_reg_307, sum_of_squares_split_addr_6_reg_312, sum_of_squares_split_addr_7_reg_317, ap_reg_ppstg_exitcond1_reg_322_pp0_it14, tmp_cast_fu_270_p1)
    begin
        if ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= esl_trunc(ap_const_lv32_6, 3);
        elsif ((ap_ST_st3_fsm_3 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= esl_trunc(ap_const_lv32_4, 3);
        elsif ((ap_ST_st2_fsm_2 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= esl_trunc(ap_const_lv32_2, 3);
        elsif ((ap_ST_st1_fsm_1 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= esl_trunc(ap_const_lv32_0, 3);
        elsif ((ap_ST_st60_fsm_38 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_7_reg_317;
        elsif ((ap_ST_st55_fsm_33 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_6_reg_312;
        elsif ((ap_ST_st50_fsm_28 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_5_reg_307;
        elsif ((ap_ST_st45_fsm_23 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_4_reg_302;
        elsif ((ap_ST_st40_fsm_18 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_3_reg_297;
        elsif ((ap_ST_st35_fsm_13 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_2_reg_292;
        elsif ((ap_ST_st30_fsm_8 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_1_reg_287;
        elsif ((ap_ST_st28_fsm_6 = ap_CS_fsm)) then 
            sum_of_squares_split_address0 <= sum_of_squares_split_addr_reg_282;
        elsif (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it15) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it14))) then 
            sum_of_squares_split_address0 <= esl_trunc(tmp_cast_fu_270_p1, 3);
        else 
            sum_of_squares_split_address0 <= esl_trunc(tmp_cast_fu_270_p1, 3);
        end if; 
    end process;


    -- sum_of_squares_split_address1 assign process. --
    sum_of_squares_split_address1_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it22, ap_reg_ppstg_exitcond1_reg_322_pp0_it21, ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it21)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it21))) then 
            sum_of_squares_split_address1 <= ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it21;
        elsif ((ap_ST_st4_fsm_4 = ap_CS_fsm)) then 
            sum_of_squares_split_address1 <= esl_trunc(ap_const_lv32_7, 3);
        elsif ((ap_ST_st3_fsm_3 = ap_CS_fsm)) then 
            sum_of_squares_split_address1 <= esl_trunc(ap_const_lv32_5, 3);
        elsif ((ap_ST_st2_fsm_2 = ap_CS_fsm)) then 
            sum_of_squares_split_address1 <= esl_trunc(ap_const_lv32_3, 3);
        elsif ((ap_ST_st1_fsm_1 = ap_CS_fsm)) then 
            sum_of_squares_split_address1 <= esl_trunc(ap_const_lv32_1, 3);
        else 
            sum_of_squares_split_address1 <= ap_reg_ppstg_sum_of_squares_split_addr_8_reg_356_pp0_it21;
        end if; 
    end process;


    -- sum_of_squares_split_ce0 assign process. --
    sum_of_squares_split_ce0_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it15, ap_reg_ppstg_exitcond1_reg_322_pp0_it14)
    begin
        if (((ap_ST_st1_fsm_1 = ap_CS_fsm) or (ap_ST_st2_fsm_2 = ap_CS_fsm) or (ap_ST_st3_fsm_3 = ap_CS_fsm) or (ap_ST_st4_fsm_4 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it15) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it14)) or (ap_ST_st28_fsm_6 = ap_CS_fsm) or (ap_ST_st30_fsm_8 = ap_CS_fsm) or (ap_ST_st35_fsm_13 = ap_CS_fsm) or (ap_ST_st40_fsm_18 = ap_CS_fsm) or (ap_ST_st45_fsm_23 = ap_CS_fsm) or (ap_ST_st50_fsm_28 = ap_CS_fsm) or (ap_ST_st55_fsm_33 = ap_CS_fsm) or (ap_ST_st60_fsm_38 = ap_CS_fsm))) then 
            sum_of_squares_split_ce0 <= ap_const_logic_1;
        else 
            sum_of_squares_split_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_of_squares_split_ce1 assign process. --
    sum_of_squares_split_ce1_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it22, ap_reg_ppstg_exitcond1_reg_322_pp0_it21)
    begin
        if (((ap_ST_st1_fsm_1 = ap_CS_fsm) or (ap_ST_st2_fsm_2 = ap_CS_fsm) or (ap_ST_st3_fsm_3 = ap_CS_fsm) or (ap_ST_st4_fsm_4 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it21)))) then 
            sum_of_squares_split_ce1 <= ap_const_logic_1;
        else 
            sum_of_squares_split_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    sum_of_squares_split_d0 <= ap_const_lv64_0;

    -- sum_of_squares_split_d1 assign process. --
    sum_of_squares_split_d1_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it22, ap_reg_ppstg_exitcond1_reg_322_pp0_it21, tmp_1_reg_367)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it21))) then 
            sum_of_squares_split_d1 <= tmp_1_reg_367;
        elsif (((ap_ST_st1_fsm_1 = ap_CS_fsm) or (ap_ST_st2_fsm_2 = ap_CS_fsm) or (ap_ST_st3_fsm_3 = ap_CS_fsm) or (ap_ST_st4_fsm_4 = ap_CS_fsm))) then 
            sum_of_squares_split_d1 <= ap_const_lv64_0;
        else 
            sum_of_squares_split_d1 <= ap_const_lv64_0;
        end if; 
    end process;


    -- sum_of_squares_split_we0 assign process. --
    sum_of_squares_split_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st1_fsm_1 = ap_CS_fsm) or (ap_ST_st2_fsm_2 = ap_CS_fsm) or (ap_ST_st3_fsm_3 = ap_CS_fsm) or (ap_ST_st4_fsm_4 = ap_CS_fsm))) then 
            sum_of_squares_split_we0 <= ap_const_logic_1;
        else 
            sum_of_squares_split_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- sum_of_squares_split_we1 assign process. --
    sum_of_squares_split_we1_assign_proc : process(ap_CS_fsm, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1, ap_reg_ppiten_pp0_it22, ap_reg_ppstg_exitcond1_reg_322_pp0_it21)
    begin
        if (((ap_ST_st1_fsm_1 = ap_CS_fsm) or (ap_ST_st2_fsm_2 = ap_CS_fsm) or (ap_ST_st3_fsm_3 = ap_CS_fsm) or (ap_ST_st4_fsm_4 = ap_CS_fsm) or ((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it22) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_322_pp0_it21)))) then 
            sum_of_squares_split_we1 <= ap_const_logic_1;
        else 
            sum_of_squares_split_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_cast_fu_270_p1 <= esl_zext(ap_reg_ppstg_dim_cast2_reg_331_pp0_it14, 32);

    -- vector1_data_V_read assign process. --
    vector1_data_V_read_assign_proc : process(ap_CS_fsm, exitcond1_reg_322, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (exitcond1_reg_322 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            vector1_data_V_read <= ap_const_logic_1;
        else 
            vector1_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    vector1_keep_V_read <= ap_const_logic_0;
    vector1_last_V_read <= ap_const_logic_0;

    -- vector2_data_V_read assign process. --
    vector2_data_V_read_assign_proc : process(ap_CS_fsm, exitcond1_reg_322, ap_sig_bdd_100, ap_reg_ppiten_pp0_it1)
    begin
        if (((ap_ST_pp0_stg0_fsm_5 = ap_CS_fsm) and (exitcond1_reg_322 = ap_const_lv1_0) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and esl_not((ap_sig_bdd_100 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then 
            vector2_data_V_read <= ap_const_logic_1;
        else 
            vector2_data_V_read <= ap_const_logic_0;
        end if; 
    end process;

    vector2_keep_V_read <= ap_const_logic_0;
    vector2_last_V_read <= ap_const_logic_0;
end behav;
