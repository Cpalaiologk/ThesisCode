// ==============================================================
// RTL generated by AutoESL - High-Level Synthesis System (C, C++, SystemC)
// Version: 2012.1
// Copyright (C) 2012 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module basic (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        a,
        b,
        c
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
input  [7:0] a;
input  [7:0] b;
output  [7:0] c;

reg ap_done;
reg ap_idle;
reg[7:0] c = 8'b00000000;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [7:0] b_read_reg_69;
reg   [7:0] a_read_reg_74;
wire   [7:0] grp_fu_64_p2;
wire   [7:0] grp_fu_64_p0;
wire   [7:0] grp_fu_64_p1;
wire    grp_fu_64_ce;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st0_fsm_0 = 3'b000;
parameter    ap_ST_st1_fsm_1 = 3'b001;
parameter    ap_ST_st2_fsm_2 = 3'b010;
parameter    ap_ST_st3_fsm_3 = 3'b011;
parameter    ap_ST_st4_fsm_4 = 3'b100;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_true = 1'b1;


basic_grp_fu_64_ACMP_add_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .dout_WIDTH( 8 ))
basic_grp_fu_64_ACMP_add_1_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .din0( grp_fu_64_p0 ),
    .din1( grp_fu_64_p1 ),
    .ce( grp_fu_64_ce ),
    .dout( grp_fu_64_p2 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st0_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// c assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_c
    if (ap_rst == 1'b1) begin
        c <= ap_const_lv8_0;
    end else begin
        if ((ap_ST_st3_fsm_3 == ap_CS_fsm)) begin
            c <= grp_fu_64_p2;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        a_read_reg_74 <= a;
    end
    if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        b_read_reg_69 <= b;
    end
end

/// the next state (ap_NS_fsm) of the state machine. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st4_fsm_4 == ap_CS_fsm))) begin
        ap_NS_fsm = ap_ST_st0_fsm_0;
    end else if ((ap_ST_st3_fsm_3 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st4_fsm_4;
    end else if ((ap_ST_st2_fsm_2 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st3_fsm_3;
    end else if ((ap_ST_st1_fsm_1 == ap_CS_fsm)) begin
        ap_NS_fsm = ap_ST_st2_fsm_2;
    end else if ((((ap_ST_st0_fsm_0 == ap_CS_fsm) & (ap_const_logic_1 == ap_start)) | ((ap_const_logic_1 == ap_start) & (ap_ST_st4_fsm_4 == ap_CS_fsm)))) begin
        ap_NS_fsm = ap_ST_st1_fsm_1;
    end else begin
        ap_NS_fsm = ap_CS_fsm;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_4 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st0_fsm_0 == ap_CS_fsm)) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end
assign grp_fu_64_ce = ap_const_logic_1;
assign grp_fu_64_p0 = b_read_reg_69;
assign grp_fu_64_p1 = a_read_reg_74;


endmodule //basic

